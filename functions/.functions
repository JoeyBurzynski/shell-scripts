#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

  zippedSize=$(
    stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
    stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
  );
  echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Create a git.io short URL
function gitio() {
	if [ -z "${1}" -o -z "${2}" ]; then
		echo "Usage: \`gitio slug url\`";
		return 1;
	fi;
	curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
function codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
	if [ $# -eq 0 ]; then
		subl .;
	else
		subl "$@";
	fi;
}

# `a` with no arguments opens the current directory in Atom Editor, otherwise
# opens the given location
function a() {
	if [ $# -eq 0 ]; then
		atom .;
	else
		atom "$@";
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function printWithColor () {
  local ResetColor='\e[0m'    # Text Color Reset
  local message="$1";
  local IntenseYellow='\e[0;93m';

  # Regular              Bold                      Underline                     High Intensity              BoldHigh Intens                 Background            High Intensity Backgrounds
  # Black='\e[0;30m';    BoldBlack='\e[1;30m';     UnderlineBlack='\e[4;30m';    IntenseBlack='\e[0;90m';    BoldInstenseBlack='\e[1;90m';   On_Black='\e[40m';    On_IntenseBlack='\e[0;100m';
  # Red='\e[0;31m';      BoldRed='\e[1;31m';       UnderlineRed='\e[4;31m';      IntenseRed='\e[0;91m';      BoldInstenseRed='\e[1;91m';     On_Red='\e[41m';      On_IntenseRed='\e[0;101m';
  # Green='\e[0;32m';    BoldGreen='\e[1;32m';     UnderlineGreen='\e[4;32m';    IntenseGreen='\e[0;92m';    BoldInstenseGreen='\e[1;92m';   On_Green='\e[42m';    On_IntenseGreen='\e[0;102m';
  # Yellow='\e[0;33m';   BoldYellow='\e[1;33m';    UnderlineYellow='\e[4;33m';   IntenseYellow='\e[0;93m';   BoldInstenseYellow='\e[1;93m';  On_Yellow='\e[43m';   On_IntenseYellow='\e[0;103m';
  # Blue='\e[0;34m';     BoldBlue='\e[1;34m';      UnderlineBlue='\e[4;34m';     IntenseBlue='\e[0;94m';     BoldInstenseBlue='\e[1;94m';    On_Blue='\e[44m';     On_IntenseBlue='\e[0;104m';
  # Purple='\e[0;35m';   BoldPurple='\e[1;35m';    UnderlinePurple='\e[4;35m';   IntensePurple='\e[0;95m';   BoldInstensePurple='\e[1;95m';  On_Purple='\e[45m';   On_IntensePurple='\e[0;105m';
  # Cyan='\e[0;36m';     BoldCyan='\e[1;36m';      UnderlineCyan='\e[4;36m';     IntenseCyan='\e[0;96m';     BoldInstenseCyan='\e[1;96m';    On_Cyan='\e[46m';     On_IntenseCyan='\e[0;106m';
  # White='\e[0;37m';    BoldWhite='\e[1;37m';     UnderlineWhite='\e[4;37m';    IntenseWhite='\e[0;97m';    BoldInstenseWhite='\e[1;97m';   On_White='\e[47m';    On_IntenseWhite='\e[0;107m';

  # Then you can just echo -e "${Blue}blue ${Red}red ${ResetColor}etc...."

 echo -e "${IntenseYellow}$message${ResetColor}"
}

# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
function update () {

  #################### OS X ####################
	# Get OS X Software Updates
  printWithColor "Checking for OS X updates.."
  sudo softwareupdate -i -a

  #################### Homebrew ####################
  # Update Homebrew & cleanup old packages.
  printWithColor "Checking for Homebrew updates.."
  brew update
  brew upgrade
  brew cleanup
  brew prune

  #################### NodeJS ####################
  # Ensure the latest version of NPM is installed.
  printWithColor "Checking for NPM core updates.."
  npm install npm -g

  # Update NPM Global packages.
  printWithColor "Updating NPM global packages.."
  npm update -g

  # Ensure we're running the latest version of Node Version Manager.
  printWithColor "Checking for NVM (Node Version Manager) updates.."
    cd "$NVM_DIR" || exit
    git fetch origin
    git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" origin)"

    # shellcheck source=/dev/null
    . "$(NVM_DIR)/nvm.sh"

  #################### Ruby ####################
  # Check for Ruby Gem command updates.
  printWithColor "Checking for Ruby Gem command updates.."
  gem update --system

  # Check for Ruby bundler gem updates.
  printWithColor "Checking for Ruby Bundler updates.."
  gem install bundler

  # Check for Ruby Environment Manager updates.
  printWithColor "Checking for rbenv (Ruby Environment Manager) updates.."
  rbenv update

  #################### Python ####################
  # Check for Python Environment Manager updates.
  printWithColor "Checking for pyenv (Python Environment Manager) updates.."
  pyenv update

  # Ensure we have the latest version of pip & setuptools installed.
  printWithColor "Checking for Python pip & setuptools updates.."
  pip install -U pip setuptools
  # pip list --outdated | cut -d' ' -f1 | xargs pip install --upgrade

  # Update packages across all installed versions of Python.
  printWithColor "Updating all installed Python version packages via pip.."
  pyenv pip-update
}



# Git: Branch Reset Shortcut
# Sync a local branch to match remote origin
function gitreset () {
  if [ -z "$1" ]; then
    git branch
    echo "What the hell am I trying to reset?  Give me a branch name."
    echo "Usage: gitreset <branch name>"
  else
    echo "Executing: git fetch origin && git reset --hard origin/$1 && git clean -f -d"
    git fetch origin -p && git reset --hard origin/"$1" && git clean -f -d
  fi
}

# Git: Branch Push Shortcut
# Quick push of local updates to remote branch
function gpush () {
  if [ -z "$1" ]; then
    git branch
    echo "What the hell am I trying to push?  Give me a branch name."
    echo "Usage: gpush <branch name>"
  else
    echo "Executing: 'git add --all; git commit -am 'Latest. [ automated push ]'; git push origin master'"
    git add --all
    git commit -am 'Latest. [ automated push ]'
    git push origin "$1"
  fi
}

